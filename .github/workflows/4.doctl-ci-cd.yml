name: 4. DO App Platform - CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment selection"
        required: true
        type: environment
        default: "dev"
      working-directory:
        description: "Working Directory"
        required: true
        type: string
        default: './backend'
      java-version:
        description: "Define Java Version"
        required: true
        type: string
        default: '17'
  
  pull_request:
    branches:
      - main
    types: [closed]

permissions:
  contents: write

jobs:
  CI:
    name: Build and Push to Container
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      packages: read

    steps:
      - name: Setup Environment variables
        id: vars
        run: |
          echo "environment=${{ inputs.environment || 'dev' }}" >> $GITHUB_OUTPUT
          echo "working-directory=${{ inputs.working-directory || './backend' }}" >> $GITHUB_OUTPUT
          echo "java-version=${{ inputs.java-version || '17' }}" >> $GITHUB_OUTPUT

      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ steps.vars.outputs.java-version }}
          distribution: 'adopt'
          cache: maven

      - name: Debug Information
        run: |
          echo environment: ${{ github.event.inputs.environment || 'default' }}
          echo github actor: ${{ github.actor }}
          echo github actor id: ${{ github.actor_id }}
          echo branch or tag: ${{ github.ref_type }}
          echo branch or tag name: ${{ github.ref_name }}
          echo git_hash: $(git rev-parse --short "$GITHUB_SHA")
          echo git_branch: ${GITHUB_REF#refs/heads/}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}
          echo JAVA VERSION: ${{ inputs.java-version }}

      - name: Build and package with maven
        run: |
          cd ${{ steps.vars.outputs.working-directory }}
          mvn clean package -Dmaven.test.skip --file pom.xml
      
      - name: Build Docker Image
        run: |
          cd ${{ steps.vars.outputs.working-directory }}
          docker build -t registry.digitalocean.com/${{ vars.DOCR_REGISTRY_NAME }}/tams-webserver:latest .

      - name: Authenticate Docker with DOCR
        run: doctl registry login

      - name: Push Docker Image to DOCR
        run: |
          docker push registry.digitalocean.com/${{ vars.DOCR_REGISTRY_NAME }}/tams-webserver:latest

      - name: Confirm image pushed
        run: |
          echo "✅ Image pushed to DOCR: registry.digitalocean.com/${{ vars.DOCR_REGISTRY_NAME }}/tams-webserver:latest"

  CD:
    name: Deploy to App Platform
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Debug Information
        run: |
          echo environment: ${{ github.event.inputs.environment || 'default' }}
          echo github actor: ${{ github.actor }}
          echo github actor id: ${{ github.actor_id }}
          echo branch or tag: ${{ github.ref_type }}
          echo branch or tag name: ${{ github.ref_name }}
          echo git_hash: $(git rev-parse --short "$GITHUB_SHA")
          echo git_branch: ${GITHUB_REF#refs/heads/}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}
          echo JAVA VERSION: ${{ inputs.java-version }}

      - name: Check if App Platform is Exists
        run: |
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep tams-web-application | awk '{print $1}')
          if [[ -n "$APP_ID" ]]; then
            echo "✅ App Platform already exists with ID: $APP_ID"
            echo "APP_EXISTS=true" >> $GITHUB_ENV
            echo "APP_ID=$APP_ID" >> $GITHUB_ENV
          else
            echo "❌ App Platform does not exist."
            echo "APP_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Redeployment latest Image
        if: env.APP_EXISTS == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "App is exist. APP ID: $APP_ID"
          doctl apps create-deployment $APP_ID --wait --force-rebuild true --format ID

  CLEAN_CONTAINER:
    name: Clean up the DOCR container registry which no tag.
    runs-on: ubuntu-latest
    needs: CD
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Debug Information
        run: |
          echo environment: ${{ github.event.inputs.environment || 'default' }}
          echo github actor: ${{ github.actor }}
          echo github actor id: ${{ github.actor_id }}
          echo branch or tag: ${{ github.ref_type }}
          echo branch or tag name: ${{ github.ref_name }}
          echo git_hash: $(git rev-parse --short "$GITHUB_SHA")
          echo git_branch: ${GITHUB_REF#refs/heads/}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}

      - name: Check if Container Registry is Exists
        run: |
          REGISTRY_ID=$(doctl registry get ${{ vars.DOCR_REGISTRY_NAME }} --format Name,Endpoint --no-header | grep ${{ vars.DOCR_REGISTRY_NAME }} | awk '{print $1}')
          if [[ -n "$REGISTRY_ID" ]]; then
            echo "✅ Container Registry already exists with ID: $REGISTRY_ID"
            echo "REGISTRY_EXISTS=true" >> $GITHUB_ENV
            echo "REGISTRY_ID=$REGISTRY_ID" >> $GITHUB_ENV
          else
            echo "❌ Container Registry does not exist."
            echo "REGISTRY_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Cleanup DOCR container registry
        if: env.REGISTRY_EXISTS == 'true'
        shell: bash
        run: |
          set -euo pipefail
          doctl registry garbage-collection start ${{ vars.DOCR_REGISTRY_NAME }} --include-untagged-manifests true --force true
