name: doctl - Provision Database

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment selection"
        required: true
        type: environment
        default: "dev"

permissions:
  contents: write

jobs:
  provision:
    name: Provision and Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      packages: read

    steps:
      # Step 1: Install and authenticate doctl
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Debug Information
        run: |
          echo environment: ${{ inputs.environment || 'N/A' }}
          echo INSTANCE_NAME: ${{ vars.DB_INSTANCE_NAME }}
          echo DATABSE_NAME: ${{ vars.DATABSE_NAME }}
          echo USER_NAME: ${{ vars.DB_USER_NAME }}

        # Step 2: check is DB exists
      - name: Check if Databse is Exists
        run: |
          DATABSE_ID=$(doctl databases list --format ID,Name --no-header | grep "${{ vars.DB_INSTANCE_NAME }}" | awk '{print $1}')
          if [[ -n "$DATABSE_ID" ]]; then
            echo "✅ Databse already exists with ID: $DATABSE_ID"
            echo "DATABSE_EXISTS=true" >> $GITHUB_ENV
            echo "DATABSE_ID=$DATABSE_ID" >> $GITHUB_ENV
          else
            echo "❌ Databse does not exist."
            echo "DATABSE_EXISTS=false" >> $GITHUB_ENV
          fi

      # Step 3: Create the MySQL cluster on DigitalOcean
      - name: Create DO MySQL Cluster
        if: env.DATABSE_EXISTS == 'false'
        shell: bash
        run: |
          set -euo pipefail
          echo "Creating MySQL 8 cluster......."
          
          # Create the DB cluster in blr1 (Bangalore), 1vCPU/1GB Memory, 10GB disk, single-node, MySQL 8
          doctl databases create ${{ vars.DB_INSTANCE_NAME }}-${{ inputs.environment }} \
            --region blr1 \
            --engine mysql \
            --version 8 \
            --size db-s-1vcpu-1gb \
            --num-nodes 1 \
            --storage-size-mib 10240 \
            --wait
          echo "✅ Database is created successfully with the name of ${{ vars.DB_INSTANCE_NAME }}-${{ inputs.environment }} "

      # Step 4: Retrieve DB Cluster ID
      - name: Retrieve DB Cluster ID
        if: env.DATABSE_EXISTS == 'false'
        shell: bash
        run: |
          set -euo pipefail
          CLUSTER_ID=$(doctl databases list --output json | jq -r ".[] | select(.name == \"${{ vars.DB_INSTANCE_NAME }}-${{ inputs.environment }}\") | .id")
          echo "Cluster ID: $CLUSTER_ID"
          echo "CLUSTER_ID=$CLUSTER_ID" >> "$GITHUB_ENV"

      # Step 5: Create database name ane user name
      - name: Configure Database Schema
        if: env.DATABSE_EXISTS == 'false'
        shell: bash
        run: |
          set -euo pipefail
          echo "Creating database with the name '${{ vars.DATABSE_NAME }}' and user '${{ vars.DB_USER_NAME }}'..."
          
          # Creating a database..........
          doctl databases db create "${{ env.CLUSTER_ID }}" "${{ vars.DATABSE_NAME }}"
          
          # Create the user (doctl auto-generates a strong password:contentReference[oaicite:5]{index=5})
          # Creating a user..........
          doctl databases user create "${{ env.CLUSTER_ID }}" "${{ vars.DB_USER_NAME }}"
          
          # Retrieve the generated password for the new user
          USER_JSON=$(doctl databases user get "${{ env.CLUSTER_ID }}" "${{ vars.DB_USER_NAME }}" -o json)
          DB_PASSWORD=$(echo "$USER_JSON" | jq -r '.[0].Password')
          echo "DB_PASSWORD=$DB_PASSWORD" >> "$GITHUB_ENV"

      # Step 6: Retrieve DB connection info's
      - name: Retrieve Connection Info
        if: env.DATABSE_EXISTS == 'false'
        shell: bash
        run: |
          set -euo pipefail
          CLUSTER_ID=${{ env.CLUSTER_ID }}

          # Get connection details
          CONN_JSON=$(doctl databases connection "$CLUSTER_ID" --output json)
          
          DB_HOST=$(echo "$CONN_JSON" | jq -r '.Host')
          DB_PORT=$(echo "$CONN_JSON" | jq -r '.Port')
          echo "DB_HOST=$DB_HOST" >> "$GITHUB_ENV"
          echo "DB_PORT=$DB_PORT" >> "$GITHUB_ENV"

        # Step 7: Set DB connection details in Github environments   
      - name: Set DB connection environments in GitHub Secrets
        if: env.DATABSE_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          gh api \
          -X PUT \
          -H "Accept: application/vnd.github.v3+json" \
          "/repos/${{ github.repository }}/environments/${{ github.event.inputs.environment || 'N/A' }}"
          
          # Set environment variables
          gh variable set DB_CLUSTER_ID --env ${{ github.event.inputs.environment || 'N/A' }} --repo ${{ github.repository }} --body "${{ env.CLUSTER_ID }}"
          gh variable set DB_HOST --env ${{ github.event.inputs.environment || 'N/A' }} --repo ${{ github.repository }} --body "${{ env.DB_HOST }}"
          gh variable set DB_PORT --env ${{ github.event.inputs.environment || 'N/A' }} --repo ${{ github.repository }} --body "${{ env.DB_PORT }}"
          
          # Set secret
          echo -n "${{ env.DB_PASSWORD }}" | gh secret set DB_PASSWORD --env ${{ github.event.inputs.environment || 'N/A' }} --repo ${{ github.repository }}
