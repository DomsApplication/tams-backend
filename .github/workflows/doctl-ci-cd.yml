name: doctl - Backend CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment selection"
        required: true
        type: environment
        default: "dev"
      working-directory:
        description: "Working Directory"
        required: true
        type: string
        default: './backend'
      jar-filename:
        description: "Working Directory"
        required: true
        type: string
        default: 'shavika-websocket-standalone-1.0.0.jar'

permissions:
  contents: write

jobs:
  provision:
    name: Provision and Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      packages: read

    steps:
      - name: Check out code
        id: vars
        run: |
          echo "environment=${{ inputs.environment || 'dev' }}" >> $GITHUB_OUTPUT
          echo "working-directory=${{ inputs.working-directory || './backend' }}" >> $GITHUB_OUTPUT
          echo "jar-filename=${{ inputs.jar-filename || 'shavika-websocket-standalone-1.0.0.jar' }}" >> $GITHUB_OUTPUT

      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      
      - name: Install OpenJDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'adopt'
          cache: maven

      - name: Debug Information
        run: |
          echo environment: ${{ github.event.inputs.environment || 'default' }}
          echo github actor: ${{ github.actor }}
          echo github actor id: ${{ github.actor_id }}
          echo branch or tag: ${{ github.ref_type }}
          echo branch or tag name: ${{ github.ref_name }}
          echo git_hash: $(git rev-parse --short "$GITHUB_SHA")
          echo git_branch: ${GITHUB_REF#refs/heads/}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}
          echo HOST: ${{ vars.BACKEND_DROPLET_IP }}

      - name: Build and package with maven
        run: |
          cd ${{ steps.vars.outputs.working-directory }}
          mvn clean package -Dmaven.test.skip

      - name: Move application package to remote server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ vars.BACKEND_DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 600s
          overwrite: true
          source: ${{ steps.vars.outputs.working-directory }}/target/${{ steps.vars.outputs.jar-filename }}
          target: /home/shavika-tams

      - name: Move application properties file to remote server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ vars.BACKEND_DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 600s
          overwrite: true
          source: ${{ steps.vars.outputs.working-directory }}/src/main/resources/application-${{ steps.vars.outputs.environment }}.yml
          target: /home/shavika-tams

      - name: Run the application in server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ vars.BACKEND_DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 900s
          script: |
            echo "=============> Login to server.........."
            cd /home/shavika-tams
            mv ${{ steps.vars.outputs.working-directory }}/src/main/resources/application-${{ steps.vars.outputs.environment }}.yml  /home/shavika-tams
            mv ${{ steps.vars.outputs.working-directory }}/target/${{ steps.vars.outputs.jar-filename }} /home/shavika-tams
            chmod 777 ${{ steps.vars.outputs.jar-filename }}
            rm -r backend/
            pwd
            ls -l

            # Run new JAR in background with config and capture PID
            echo "Starting new application..."
            nohup java -jar ${{ steps.vars.outputs.jar-filename }} --spring.config.location=application-${{ steps.vars.outputs.environment }}.yml > app.log 2>&1 &
            echo $! > app.pid

            # Confirm
            echo "Application started with PID: $(cat app.pid)"
            ls -l





